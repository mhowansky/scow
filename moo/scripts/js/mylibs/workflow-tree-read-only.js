// Generated by CoffeeScript 1.7.1
(function() {
  var ACTIVITY_TYPE_MAP, Activities, Activity, Decision, Exit, HumanTask, Loop, ScriptTask, ServiceTask, Signal, Subprocess, Workflow, WorkflowBuilderViewModel, getActivity,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  $(function() {
    return ko.applyBindings(new WorkflowBuilderViewModel());
  });

  WorkflowBuilderViewModel = (function() {
    function WorkflowBuilderViewModel() {
      this.formSubmit = __bind(this.formSubmit, this);
      this.templateName = __bind(this.templateName, this);
      this.loadWorkflow = __bind(this.loadWorkflow, this);
      this.loadWorkflow("SvcAndScript");
      this.loadWorkflow("denim_test");
      this.loadWorkflow("BrianTest");
      this.loadWorkflow("exit-test");
      this.loadWorkflow("LoopTest");
      this.loadWorkflow("complicated");
      this.loadWorkflow("signal");
      this.loadWorkflow("subproctest");
      this.workflows = ko.observableArray();
    }

    WorkflowBuilderViewModel.prototype.loadWorkflow = function(workflowName) {
      return COW.cowRequest("processes/" + workflowName).done((function(_this) {
        return function(data) {
          _this.workflows.push(new Workflow(data));
          return $(".wflowTree").dynatree({
            imagePath: "images/"
          });
        };
      })(this));
    };

    WorkflowBuilderViewModel.prototype.templateName = function(activity) {
      return activity.templateName;
    };

    WorkflowBuilderViewModel.prototype.formSubmit = function() {
      var name;
      name = $("#newWorkflowName").val();
      this.loadWorkflow(name);
      return $("#newWorkflowName").val("");
    };

    return WorkflowBuilderViewModel;

  })();

  ACTIVITY_TYPE_MAP = {
    "org.wiredwidgets.cow.server.api.model.v2.Activities": function(data) {
      return new Activities(data);
    },
    "org.wiredwidgets.cow.server.api.model.v2.Task": function(data) {
      return new HumanTask(data);
    },
    "org.wiredwidgets.cow.server.api.model.v2.ServiceTask": function(data) {
      return new ServiceTask(data);
    },
    "org.wiredwidgets.cow.server.api.model.v2.Script": function(data) {
      return new ScriptTask(data);
    },
    "org.wiredwidgets.cow.server.api.model.v2.Decision": function(data) {
      return new Decision(data);
    },
    "org.wiredwidgets.cow.server.api.model.v2.Exit": function(data) {
      return new Exit(data);
    },
    "org.wiredwidgets.cow.server.api.model.v2.Loop": function(data) {
      return new Loop(data);
    },
    "org.wiredwidgets.cow.server.api.model.v2.Signal": function(data) {
      return new Signal(data);
    },
    "org.wiredwidgets.cow.server.api.model.v2.SubProcess": function(data) {
      return new Subprocess(data);
    }
  };

  getActivity = function(data) {
    return ACTIVITY_TYPE_MAP[data.declaredType](data.value);
  };

  Workflow = (function() {
    function Workflow(wflowData) {
      this.key = wflowData.key;
      this.activities = getActivity(wflowData.activity);
    }

    return Workflow;

  })();

  Activity = (function() {
    function Activity(data) {
      var _ref;
      this.name = (_ref = data.name) != null ? _ref : this.constructor.name;
      this.key = data.key;
      this.templateName = "task-template";
      this.icon = "icon: 'Icon_Task.png'";
    }

    return Activity;

  })();

  Activities = (function(_super) {
    __extends(Activities, _super);

    Activities.typeString = "org.wiredwidgets.cow.server.api.model.v2.Activities";

    function Activities(activitiesData) {
      var data;
      Activities.__super__.constructor.apply(this, arguments);
      this.isSequential = activitiesData.sequential;
      this.children = (function() {
        var _i, _len, _ref, _results;
        _ref = activitiesData.activity;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          data = _ref[_i];
          _results.push(getActivity(data));
        }
        return _results;
      })();
      this.templateName = "activities-template";
      this.icon = "icon: 'Icon_List.png'";
    }

    return Activities;

  })(Activity);

  HumanTask = (function(_super) {
    __extends(HumanTask, _super);

    HumanTask.typeString = "org.wiredwidgets.cow.server.api.model.v2.Task";

    function HumanTask(data) {
      HumanTask.__super__.constructor.apply(this, arguments);
    }

    return HumanTask;

  })(Activity);

  ServiceTask = (function(_super) {
    __extends(ServiceTask, _super);

    ServiceTask.typeString = "org.wiredwidgets.cow.server.api.model.v2.ServiceTask";

    function ServiceTask(data) {
      ServiceTask.__super__.constructor.apply(this, arguments);
      this.icon = "icon: 'Icon_ServiceTask.png'";
    }

    return ServiceTask;

  })(Activity);

  ScriptTask = (function(_super) {
    __extends(ScriptTask, _super);

    ScriptTask.typeString = "org.wiredwidgets.cow.server.api.model.v2.Script";

    function ScriptTask(data) {
      ScriptTask.__super__.constructor.apply(this, arguments);
      this.icon = "icon: 'Icon_Script.png'";
    }

    return ScriptTask;

  })(Activity);

  Decision = (function(_super) {
    __extends(Decision, _super);

    Decision.typeString = "org.wiredwidgets.cow.server.api.model.v2.Decision";

    function Decision(data) {
      var o, option, _i, _len, _ref;
      Decision.__super__.constructor.apply(this, arguments);
      this.options = (function() {
        var _i, _len, _ref, _results;
        _ref = data.option;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          option = _ref[_i];
          _results.push(getActivity(option.activity));
        }
        return _results;
      })();
      _ref = this.options;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        o = _ref[_i];
        o.icon = "icon: 'Icon_Decision_Arrow.png'";
      }
      this.templateName = "option-template";
      this.icon = "icon: 'Icon_Decision.png'";
    }

    return Decision;

  })(Activity);

  Exit = (function(_super) {
    __extends(Exit, _super);

    Exit.typeString = "org.wiredwidgets.cow.server.api.model.v2.Exit";

    function Exit(data) {
      Exit.__super__.constructor.apply(this, arguments);
      this.icon = "icon: 'Icon_Exit.png'";
    }

    return Exit;

  })(Activity);

  Signal = (function(_super) {
    __extends(Signal, _super);

    Signal.typeString = "org.wiredwidgets.cow.server.api.model.v2.Signal";

    function Signal(data) {
      Signal.__super__.constructor.apply(this, arguments);
      this.icon = "icon: 'Icon_Signal.png'";
    }

    return Signal;

  })(Activity);

  Subprocess = (function(_super) {
    __extends(Subprocess, _super);

    Subprocess.typeString = "org.wiredwidgets.cow.server.api.model.v2.SubProcess";

    function Subprocess(data) {
      Subprocess.__super__.constructor.apply(this, arguments);
      this.icon = "icon: 'Icon_SubProcess.png'";
    }

    return Subprocess;

  })(Activity);

  Loop = (function(_super) {
    __extends(Loop, _super);

    Loop.typeString = "org.wiredwidgets.cow.server.api.model.v2.Loop";

    function Loop(data) {
      Loop.__super__.constructor.apply(this, arguments);
      this.templateName = "activities-template";
      this.children = getActivity(data.activity).children;
      this.icon = "icon: 'Icon_Loop.png'";
    }

    return Loop;

  })(Activity);

}).call(this);

//# sourceMappingURL=workflow-tree-read-only.map
