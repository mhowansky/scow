// Generated by CoffeeScript 1.7.1
(function() {
  var AdminViewModel,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  $(function() {
    return ko.applyBindings(new AdminViewModel());
  });

  AdminViewModel = (function() {
    function AdminViewModel() {
      this.deleteAll = __bind(this.deleteAll, this);
      this.deleteWorkflowType = __bind(this.deleteWorkflowType, this);
      this.deleteWorkflow = __bind(this.deleteWorkflow, this);
      this.update = __bind(this.update, this);
      this.runningWorkflows = ko.observableArray();
      this.runningTypes = ko.computed((function(_this) {
        return function() {
          var id, names;
          names = (function() {
            var _i, _len, _ref, _results;
            _ref = this.runningWorkflows();
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              id = _ref[_i];
              _results.push(id.leftOf("."));
            }
            return _results;
          }).call(_this);
          return names.unique();
        };
      })(this));
      this.selectedRunningWorkflow = ko.observable();
      this.selectedType = ko.observable();
      this.update();
    }

    AdminViewModel.prototype.update = function() {
      this.runningWorkflows.removeAll();
      COW.activeWorkflows((function(_this) {
        return function(ids) {
          var id, _i, _len, _results;
          _results = [];
          for (_i = 0, _len = ids.length; _i < _len; _i++) {
            id = ids[_i];
            _results.push(_this.runningWorkflows.push(id));
          }
          return _results;
        };
      })(this));
      this.selectedRunningWorkflow();
      return this.selectedType();
    };

    AdminViewModel.prototype.deleteWorkflow = function() {
      var idNum;
      idNum = this.selectedRunningWorkflow().rightOf(".");
      return COW.cowRequest("processInstances/" + idNum, "delete").done((function(_this) {
        return function() {
          alert("" + (_this.selectedRunningWorkflow()) + " deleted");
          return _this.update();
        };
      })(this));
    };

    AdminViewModel.prototype.deleteWorkflowType = function() {
      return COW.deleteRunningInstances(this.selectedType()).done((function(_this) {
        return function() {
          alert("All instances of " + (_this.selectedType()) + " deleted");
          return _this.update();
        };
      })(this));
    };

    AdminViewModel.prototype.deleteAll = function() {
      var t;
      return $.when((function() {
        var _i, _len, _ref, _results;
        _ref = this.runningTypes();
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          t = _ref[_i];
          _results.push(COW.deleteRunningInstances(t));
        }
        return _results;
      }).call(this)).done((function(_this) {
        return function() {
          _this.update();
          return alert("All Workflows Deleted");
        };
      })(this));
    };

    return AdminViewModel;

  })();

}).call(this);

//# sourceMappingURL=admin.map
