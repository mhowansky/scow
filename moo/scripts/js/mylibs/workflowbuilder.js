// Generated by CoffeeScript 1.7.1
(function() {
  var ACTIVITY_TYPE_MAP, Activities, Activity, Decision, Exit, HumanTask, Loop, ScriptTask, ServiceTask, Signal, Subprocess, Workflow, WorkflowBuilderViewModel, createDisplay, dndOptions, getActivity,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  $(function() {
    return ko.applyBindings(new WorkflowBuilderViewModel());
  });

  dndOptions = {
    autoExpandMS: 100,
    preventVoidMoves: true,
    preventRecursiveMoves: true,
    dragStart: function(node) {
      return node.data.draggable;
    },
    dragEnter: function(target, data) {
      return target.data.self.dragEnter(data);
    },
    dragDrop: function(target, data) {
      if (data.hitMode === "over") {
        return data.otherNode.moveTo(target.getFirstChild(), "before");
      } else {
        return data.otherNode.moveTo(target, data.hitMode);
      }
    }
  };

  WorkflowBuilderViewModel = (function() {
    function WorkflowBuilderViewModel() {
      this.configTree = __bind(this.configTree, this);
      this.loadWorkflow = __bind(this.loadWorkflow, this);
      this.workflow = ko.observable();
      this.loadWorkflow("SvcAndScript");
      this.selectedActivity = ko.observable();
    }

    WorkflowBuilderViewModel.prototype.loadWorkflow = function(workflowName) {
      return COW.cowRequest("processes/" + workflowName).done((function(_this) {
        return function(data) {
          _this.workflow(new Workflow(data));
          return _this.configTree(_this.workflow());
        };
      })(this));
    };

    WorkflowBuilderViewModel.prototype.configTree = function(workflow) {
      return $("#test-tree").fancytree({
        extensions: ["dnd"],
        debugLevel: 2,
        source: [workflow],
        imagePath: "images/",
        icons: false,
        dnd: dndOptions,
        click: (function(_this) {
          return function(event, data) {
            return _this.selectedActivity(data.node.data.self);
          };
        })(this)
      });
    };

    return WorkflowBuilderViewModel;

  })();

  createDisplay = function(label, value, inputType) {
    if (inputType == null) {
      inputType = "text";
    }
    return {
      label: ko.observable(label + ":"),
      value: ko.observable(value),
      inputType: ko.observable(inputType)
    };
  };

  ACTIVITY_TYPE_MAP = {
    "org.wiredwidgets.cow.server.api.model.v2.Activities": function(data) {
      return new Activities(data);
    },
    "org.wiredwidgets.cow.server.api.model.v2.Task": function(data) {
      return new HumanTask(data);
    },
    "org.wiredwidgets.cow.server.api.model.v2.ServiceTask": function(data) {
      return new ServiceTask(data);
    },
    "org.wiredwidgets.cow.server.api.model.v2.Script": function(data) {
      return new ScriptTask(data);
    },
    "org.wiredwidgets.cow.server.api.model.v2.Decision": function(data) {
      return new Decision(data);
    },
    "org.wiredwidgets.cow.server.api.model.v2.Exit": function(data) {
      return new Exit(data);
    },
    "org.wiredwidgets.cow.server.api.model.v2.Loop": function(data) {
      return new Loop(data);
    },
    "org.wiredwidgets.cow.server.api.model.v2.Signal": function(data) {
      return new Signal(data);
    },
    "org.wiredwidgets.cow.server.api.model.v2.SubProcess": function(data) {
      return new Subprocess(data);
    }
  };

  getActivity = function(data) {
    return ACTIVITY_TYPE_MAP[data.declaredType](data.value);
  };

  Activity = (function() {
    function Activity(data) {
      var _ref;
      this.data = data;
      this.setAttr = __bind(this.setAttr, this);
      this.dragEnter = __bind(this.dragEnter, this);
      this.title = (_ref = this.data.name) != null ? _ref : this.constructor.name;
      this.key = this.data.key;
      this.icon = "Icon_Task.png";
      this.draggable = true;
      this.expanded = true;
      this.self = this;
      this.isDecision = false;
      this.isActivities = false;
      this.attributes = ko.observableArray();
      this.setAttr("Name", "name");
      this.setAttr("Description", "description");
      this.setAttr("Bypassable", "bypassable", "checkbox");
    }

    Activity.prototype.dragEnter = function() {
      if (this.folder) {
        return ["over"];
      }
      return ["before", "after"];
    };

    Activity.prototype.setAttr = function(label, key, inputType) {
      if (inputType == null) {
        inputType = "text";
      }
      return this.attributes.push({
        label: ko.observable(label),
        value: ko.observable(this.data[key]),
        inputType: ko.observable(inputType)
      });
    };

    return Activity;

  })();

  Workflow = (function(_super) {
    __extends(Workflow, _super);

    function Workflow(wflowData) {
      this.key = wflowData.key;
      this.title = "<span class='glyphicon glyphicon-list-alt'></span> " + this.key;
      this.children = [getActivity(wflowData.activity)];
      this.draggable = false;
      this.folder = true;
      this.expanded = true;
      this.self = this;
      this.attributes = ko.observableArray();
    }

    Workflow.prototype.dragEnter = function() {
      return false;
    };

    return Workflow;

  })(Activity);

  Activities = (function(_super) {
    __extends(Activities, _super);

    Activities.typeString = "org.wiredwidgets.cow.server.api.model.v2.Activities";

    function Activities(data) {
      var d;
      this.data = data;
      this.dragEnter = __bind(this.dragEnter, this);
      Activities.__super__.constructor.call(this, this.data);
      this.isSequential = this.data.sequential;
      if (this.data.name != null) {
        this.title = this.data.name;
      } else {
        this.title = this.isSequential ? "List" : "Parallel List";
      }
      this.children = (function() {
        var _i, _len, _ref, _results;
        _ref = this.data.activity;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          d = _ref[_i];
          _results.push(getActivity(d));
        }
        return _results;
      }).call(this);
      this.icon = "Icon_List.png";
      this.folder = true;
      this.isActivities = true;
      this.setAttr("Sequential", "sequential", "checkbox");
    }

    Activities.prototype.dragEnter = function(data) {
      var _ref;
      if (((_ref = data.node.getParent()) != null ? _ref.data.self.isDecision : void 0) && data.otherNode.data.self.isActivities) {
        return ["over", "after", "before"];
      } else {
        return ["over"];
      }
    };

    return Activities;

  })(Activity);

  HumanTask = (function(_super) {
    __extends(HumanTask, _super);

    HumanTask.typeString = "org.wiredwidgets.cow.server.api.model.v2.Task";

    function HumanTask(data) {
      this.data = data;
      HumanTask.__super__.constructor.call(this, this.data);
      this.setAttr("Assignee", "assignee");
      this.setAttr("Candidate users", "candidateUsers");
      this.setAttr("Candidate groups", "candidateGroups");
    }

    return HumanTask;

  })(Activity);

  ServiceTask = (function(_super) {
    __extends(ServiceTask, _super);

    ServiceTask.typeString = "org.wiredwidgets.cow.server.api.model.v2.ServiceTask";

    function ServiceTask(data) {
      this.data = data;
      ServiceTask.__super__.constructor.call(this, this.data);
      this.icon = "Icon_ServiceTask.png";
      this.setAttr("Method", "method");
      this.setAttr("URL", "url");
      this.setAttr("Content", "content");
      this.setAttr("Content type", "contentType");
      this.setAttr("Var", "var");
      this.setAttr("Result selector XPath", "resultSelectorXPath");
    }

    return ServiceTask;

  })(Activity);

  ScriptTask = (function(_super) {
    __extends(ScriptTask, _super);

    ScriptTask.typeString = "org.wiredwidgets.cow.server.api.model.v2.Script";

    function ScriptTask(data) {
      ScriptTask.__super__.constructor.apply(this, arguments);
      this.icon = "Icon_Script.png";
      this.setAttr("Content", "content");
    }

    return ScriptTask;

  })(Activity);

  Decision = (function(_super) {
    __extends(Decision, _super);

    Decision.typeString = "org.wiredwidgets.cow.server.api.model.v2.Decision";

    function Decision(data) {
      this.dragEnter = __bind(this.dragEnter, this);
      var c, option, _i, _len, _ref;
      Decision.__super__.constructor.apply(this, arguments);
      this.children = (function() {
        var _i, _len, _ref, _results;
        _ref = data.option;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          option = _ref[_i];
          _results.push(getActivity(option.activity));
        }
        return _results;
      })();
      _ref = this.children;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        c = _ref[_i];
        c.icon = "Icon_Decision_Arrow.png";
      }
      this.icon = "Icon_Decision.png";
      this.folder = true;
      this.isDecision = true;
    }

    Decision.prototype.dragEnter = function(data) {
      if (data.otherNode.data.self.isActivities) {
        return ["over"];
      } else {
        return false;
      }
    };

    return Decision;

  })(Activity);

  Exit = (function(_super) {
    __extends(Exit, _super);

    Exit.typeString = "org.wiredwidgets.cow.server.api.model.v2.Exit";

    function Exit(data) {
      Exit.__super__.constructor.call(this, data);
      this.icon = "Icon_Exit.png";
    }

    return Exit;

  })(Activity);

  Signal = (function(_super) {
    __extends(Signal, _super);

    Signal.typeString = "org.wiredwidgets.cow.server.api.model.v2.Signal";

    function Signal(data) {
      Signal.__super__.constructor.call(this, data);
      this.icon = "Icon_Signal.png";
    }

    return Signal;

  })(Activity);

  Subprocess = (function(_super) {
    __extends(Subprocess, _super);

    Subprocess.typeString = "org.wiredwidgets.cow.server.api.model.v2.SubProcess";

    function Subprocess(data) {
      Subprocess.__super__.constructor.call(this, data);
      this.icon = "Icon_SubProcess.png";
    }

    return Subprocess;

  })(Activity);

  Loop = (function(_super) {
    __extends(Loop, _super);

    Loop.typeString = "org.wiredwidgets.cow.server.api.model.v2.Loop";

    function Loop(data) {
      Loop.__super__.constructor.apply(this, arguments);
      this.children = getActivity(data.activity).children;
      this.icon = "Icon_Loop.png";
      this.folder = true;
    }

    return Loop;

  })(Activity);

}).call(this);

//# sourceMappingURL=workflowbuilder.map
