// Generated by CoffeeScript 1.7.1
(function() {
  var PrettyPrintVisitor, WorkflowBuilderViewModel, WorkflowXmlConverter, dndOptions,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty;

  $(function() {
    ko.applyBindings(new WorkflowBuilderViewModel());
    $(".draggable").draggable({
      helper: "clone",
      cursorAt: {
        top: -5,
        left: -5
      },
      connectToFancytree: true
    });
    return $("#trash").droppable({
      drop: function(event, ui) {
        var sourceNode;
        sourceNode = $(ui.helper).data("ftSourceNode");
        return sourceNode.remove();
      }
    });
  });

  dndOptions = {
    autoExpandMS: 100,
    preventVoidMoves: true,
    preventRecursiveMoves: true,
    dragStart: function(target) {
      return target.data.draggable;
    },
    dragEnter: function(target, data) {
      return target.data.act.dragEnter(data);
    },
    dragDrop: function(target, data) {
      return target.data.act.dragDrop(data);
    }
  };

  WorkflowBuilderViewModel = (function() {
    function WorkflowBuilderViewModel() {
      this.save = __bind(this.save, this);
      this.prettyPrint = __bind(this.prettyPrint, this);
      this.configTree = __bind(this.configTree, this);
      this.deleteRunningInstances = __bind(this.deleteRunningInstances, this);
      this.createNewWorkflow = __bind(this.createNewWorkflow, this);
      this.loadWorkflow = __bind(this.loadWorkflow, this);
      this.workflow = ko.observable();
      this.conflictingInstances = ko.observableArray();
      this.selectedActivity = ko.observable();
      this.workflowComponents = ACT_FACTORY.draggableActivities();
      if (window.location.hash === "") {
        this.createNewWorkflow();
      } else {
        this.loadWorkflow(window.location.hash.substring(1));
      }
    }

    WorkflowBuilderViewModel.prototype.loadWorkflow = function(workflowName) {
      return COW.cowRequest("processes/" + workflowName).done((function(_this) {
        return function(data) {
          _this.workflow(ACT_FACTORY.createWorkflow(data));
          return _this.configTree(_this.workflow());
        };
      })(this));
    };

    WorkflowBuilderViewModel.prototype.createNewWorkflow = function() {
      this.workflow(ACT_FACTORY.createWorkflow());
      return this.configTree(this.workflow());
    };

    WorkflowBuilderViewModel.prototype.deleteRunningInstances = function() {
      return COW.deleteRunningInstances(this.workflow().name()).done(function() {
        $("#conflicts-modal").modal("hide");
        return $("#confirm-save-modal").modal("show");
      });
    };

    WorkflowBuilderViewModel.prototype.configTree = function(workflow) {
      $("#tree").fancytree({
        extensions: ["dnd"],
        debugLevel: 2,
        source: [workflow],
        imagePath: "images/",
        icons: false,
        dnd: dndOptions,
        click: (function(_this) {
          return function(event, data) {
            return _this.selectedActivity(data.node.data.act);
          };
        })(this)
      });
      return this.tree = $("#tree").fancytree("getTree");
    };

    WorkflowBuilderViewModel.prototype.prettyPrint = function() {
      return new PrettyPrintVisitor(this.tree);
    };

    WorkflowBuilderViewModel.prototype.save = function() {
      var converter, xml;
      converter = new WorkflowXmlConverter(this.tree);
      xml = converter.getXml();
      console.log(xml);
      if (!converter.hasAtLeaskOneTask) {
        alert("Workflow must have at least one task to save it");
        return;
      }
      return COW.xmlRequest("processes/" + converter.name, "put", xml).always(function() {
        return $("#confirm-save-modal").modal("hide");
      }).done(function() {
        return alert("Workflow saved");
      }).fail((function(_this) {
        return function() {
          var errorType, pi, resp, _i, _len, _ref;
          resp = arguments[0], errorType = arguments[arguments.length - 1];
          if (errorType !== "Conflict") {
            alert("Error: " + errorType);
            return;
          }
          _this.conflictingInstances.removeAll();
          _ref = resp.responseJSON.processInstance;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            pi = _ref[_i];
            _this.conflictingInstances.push(pi.id);
          }
          return $('#conflicts-modal').modal('show');
        };
      })(this));
    };

    return WorkflowBuilderViewModel;

  })();

  WorkflowXmlConverter = (function() {
    function WorkflowXmlConverter(tree) {
      this.addAttributesToNode = __bind(this.addAttributesToNode, this);
      this.createActivityElement = __bind(this.createActivityElement, this);
      this.visitSubprocess = __bind(this.visitSubprocess, this);
      this.visitSignal = __bind(this.visitSignal, this);
      this.visitExit = __bind(this.visitExit, this);
      this.visitScript = __bind(this.visitScript, this);
      this.visitServiceTask = __bind(this.visitServiceTask, this);
      this.visitHumanTask = __bind(this.visitHumanTask, this);
      this.visitLoop = __bind(this.visitLoop, this);
      this.visitOption = __bind(this.visitOption, this);
      this.visitDecision = __bind(this.visitDecision, this);
      this.visitActivities = __bind(this.visitActivities, this);
      this.visitWorkflow = __bind(this.visitWorkflow, this);
      this.visitChildren = __bind(this.visitChildren, this);
      var workflowRoot;
      this.hasAtLeaskOneTask = false;
      this.xml = $($.parseXML('<process xmlns="http://www.wiredwidgets.org/cow/server/schema/model-v2"></process>'));
      this.parentXml = this.xml;
      workflowRoot = tree.rootNode.children[0];
      this.visit(workflowRoot);
    }

    WorkflowXmlConverter.prototype.getXml = function() {
      return this.xml[0];
    };

    WorkflowXmlConverter.prototype.visit = function(node) {
      return node.data.act.accept(this, node);
    };

    WorkflowXmlConverter.prototype.visitChildren = function(nodeXml, nodeChildren) {
      var child, oldXmlPosition, _i, _len, _ref;
      _ref = [this.parentXml, nodeXml], oldXmlPosition = _ref[0], this.parentXml = _ref[1];
      if (nodeChildren != null) {
        for (_i = 0, _len = nodeChildren.length; _i < _len; _i++) {
          child = nodeChildren[_i];
          this.visit(child);
        }
      }
      return this.parentXml = oldXmlPosition;
    };

    WorkflowXmlConverter.prototype.visitWorkflow = function(node) {
      var process;
      this.name = node.data.act.name();
      process = $(this.parentXml.find("process"));
      this.addAttributesToNode(process, node.data.act.apiAttributes);
      this.createVariablesElement(process, node.data.act.variables);
      return this.visitChildren(process, [node.children[0]]);
    };

    WorkflowXmlConverter.prototype.visitActivities = function(node) {
      var xmlActivities, _ref;
      xmlActivities = this.createActivityElement("activities", node);
      this.hasAtLeaskOneTask = ((_ref = node.children) != null ? _ref.length : void 0) > 0;
      return this.visitChildren(xmlActivities, node.children);
    };

    WorkflowXmlConverter.prototype.visitDecision = function(node) {
      var xmlDecision, xmlTask;
      xmlDecision = this.createActivityElement("decision", node);
      xmlTask = this.createTag("task", xmlDecision);
      this.addAttributesToNode(xmlTask, node.data.act.task.apiAttributes);
      return this.visitChildren(xmlDecision, node.children);
    };

    WorkflowXmlConverter.prototype.visitOption = function(node) {
      var xmlOption;
      xmlOption = this.createActivityElement("option", node);
      return this.visitChildren(xmlOption, node.children);
    };

    WorkflowXmlConverter.prototype.visitLoop = function(node) {
      var xmlLoop, xmlLoopTask;
      xmlLoop = this.createActivityElement("loop", node);
      xmlLoopTask = this.createTag("loopTask", xmlLoop);
      this.addAttributesToNode(xmlLoopTask, node.data.act.loopTask.apiAttributes);
      return this.visitChildren(xmlLoop, node.children);
    };

    WorkflowXmlConverter.prototype.visitHumanTask = function(node) {
      return this.createActivityElement("task", node);
    };

    WorkflowXmlConverter.prototype.visitServiceTask = function(node) {
      return this.createActivityElement("serviceTask", node);
    };

    WorkflowXmlConverter.prototype.visitScript = function(node) {
      return this.createActivityElement("script", node);
    };

    WorkflowXmlConverter.prototype.visitExit = function(node) {
      return this.createActivityElement("exit", node);
    };

    WorkflowXmlConverter.prototype.visitSignal = function(node) {
      return this.createActivityElement("signal", node);
    };

    WorkflowXmlConverter.prototype.visitSubprocess = function(node) {
      return this.createActivityElement("subProcess", node);
    };

    WorkflowXmlConverter.prototype.createActivityElement = function(tag, treeNode) {
      var xml;
      xml = this.createTag(tag, this.parentXml);
      this.addAttributesToNode(xml, treeNode.data.act.apiAttributes);
      this.createVariablesElement(xml, treeNode.data.act.variables);
      return xml;
    };

    WorkflowXmlConverter.prototype.createTextElement = function(parent, tag, content) {
      var xml;
      xml = this.createTag(tag, parent);
      xml.text(content);
      return xml;
    };

    WorkflowXmlConverter.prototype.createTag = function(name, parent) {
      var newTag;
      parent.append("<" + name + " class='hack'/>");
      newTag = parent.find(".hack");
      newTag.removeAttr("class");
      return newTag;
    };

    WorkflowXmlConverter.prototype.addAttributesToNode = function(xmlElement, attributes) {
      var attr, unwrappedAttributes, _i, _len, _results;
      unwrappedAttributes = ko.mapping.toJS(attributes);
      _results = [];
      for (_i = 0, _len = unwrappedAttributes.length; _i < _len; _i++) {
        attr = unwrappedAttributes[_i];
        if (attr.value != null) {
          if (attr.isXmlAttribute) {
            _results.push(xmlElement.attr(attr.key, attr.value));
          } else {
            _results.push(this.createTextElement(xmlElement, attr.key, attr.value));
          }
        }
      }
      return _results;
    };

    WorkflowXmlConverter.prototype.createVariablesElement = function(xmlElement, observableVars) {
      var attrName, attrValue, unwrappedVars, varXml, variable, variablesXml, _i, _len, _results;
      variablesXml = this.createTag("variables", xmlElement);
      unwrappedVars = ko.mapping.toJS(observableVars);
      _results = [];
      for (_i = 0, _len = unwrappedVars.length; _i < _len; _i++) {
        variable = unwrappedVars[_i];
        varXml = this.createTag("variable", variablesXml);
        _results.push((function() {
          var _results1;
          _results1 = [];
          for (attrName in variable) {
            if (!__hasProp.call(variable, attrName)) continue;
            attrValue = variable[attrName];
            _results1.push(varXml.attr(attrName, attrValue));
          }
          return _results1;
        })());
      }
      return _results;
    };

    return WorkflowXmlConverter;

  })();

  PrettyPrintVisitor = (function() {
    function PrettyPrintVisitor(tree) {
      var workflowRoot;
      this.tree = tree;
      this.dedent = __bind(this.dedent, this);
      this.indent = __bind(this.indent, this);
      this.tabs = "";
      workflowRoot = this.tree.rootNode.children[0];
      this.visit(workflowRoot);
    }

    PrettyPrintVisitor.prototype.display = function(title) {
      return console.log(this.tabs + title);
    };

    PrettyPrintVisitor.prototype.indent = function() {
      return this.tabs += "\t";
    };

    PrettyPrintVisitor.prototype.dedent = function() {
      return this.tabs = this.tabs.substr(1);
    };

    PrettyPrintVisitor.prototype.visit = function(node) {
      return node.data.act.accept(this, node);
    };

    PrettyPrintVisitor.prototype.visitChildren = function(node) {
      var child, _i, _len, _ref;
      this.indent();
      _ref = node.children;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        child = _ref[_i];
        this.visit(child);
      }
      return this.dedent();
    };

    PrettyPrintVisitor.prototype.visitWorkflow = function(node) {
      this.display(node.data.act.name());
      return this.visitChildren(node);
    };

    PrettyPrintVisitor.prototype.visitActivities = function(node) {
      this.display(node.title);
      return this.visitChildren(node);
    };

    PrettyPrintVisitor.prototype.visitHumanTask = function(node) {
      return this.display(node.title);
    };

    PrettyPrintVisitor.prototype.visitServiceTask = function(node) {
      return this.display(node.title);
    };

    PrettyPrintVisitor.prototype.visitScript = function(node) {
      return this.display(node.title);
    };

    PrettyPrintVisitor.prototype.visitDecision = function(node) {
      this.display(node.title);
      return this.visitChildren(node);
    };

    PrettyPrintVisitor.prototype.visitOption = function(node) {
      this.display(node.title);
      return this.visitChildren(node);
    };

    PrettyPrintVisitor.prototype.visitExit = function(node) {
      return this.display(node.title);
    };

    PrettyPrintVisitor.prototype.visitLoop = function(node) {
      this.display(node.title);
      return this.visitChildren(node);
    };

    PrettyPrintVisitor.prototype.visitSignal = function(node) {
      return this.display(node.title);
    };

    PrettyPrintVisitor.prototype.visitSubprocess = function(node) {
      return this.display(node.title);
    };

    return PrettyPrintVisitor;

  })();

}).call(this);

//# sourceMappingURL=workflowbuilder.map
