// Generated by CoffeeScript 1.7.1
(function() {
  var TASK_MAPPING, Task, TasksViewModel, hack, needToUseHack, prVarValues,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  $(function() {
    return ko.applyBindings(new TasksViewModel());
  });

  prVarValues = {
    "Locate Isolated Personnel": [
      {
        name: "dataSource",
        value: "Isolated Personnel"
      }, {
        name: "activityType",
        value: "Monitoring"
      }
    ],
    "Confirm and Authenticate Personnel": [
      {
        name: "dataSource",
        value: "PRMS Simulator"
      }, {
        name: "activityType",
        value: "Monitoring"
      }
    ],
    "Get Area Population": [
      {
        name: "dataSource",
        value: "Oregon Population"
      }, {
        name: "activityType",
        value: "Monitoring"
      }
    ],
    "Select Course of Action": [
      {
        name: "dataSource",
        value: "Decision Spaces API"
      }, {
        name: "activityType",
        value: "Deciding"
      }
    ],
    "Execute Recovery": [
      {
        name: "dataSource",
        value: "Rescuers"
      }, {
        name: "activityType",
        value: "Monitoring"
      }
    ]
  };

  needToUseHack = function(mappingOptions) {
    var workflowName;
    workflowName = mappingOptions.parent.processInstanceId().split(".")[0];
    return workflowName === "Personnel_Recovery";
  };

  hack = function(mappingOptions) {
    var actualVariables, hackVariables, variable, _i, _len, _ref, _results;
    if (!needToUseHack(mappingOptions)) {
      return;
    }
    actualVariables = (_ref = mappingOptions.data.variable) != null ? _ref : mappingOptions.data.variables;
    actualVariables.splice(0, actualVariables.length);
    hackVariables = prVarValues[mappingOptions.parent.name()];
    if (hackVariables == null) {
      console.log("Null hack vars");
    }
    _results = [];
    for (_i = 0, _len = hackVariables.length; _i < _len; _i++) {
      variable = hackVariables[_i];
      _results.push(actualVariables.push(variable));
    }
    return _results;
  };

  TASK_MAPPING = {
    key: function(item) {
      return ko.utils.unwrapObservable(item.id);
    },
    variables: {
      create: function(mappingOptions) {
        var _ref;
        if (mappingOptions.data != null) {
          return ko.mapping.fromJS((_ref = mappingOptions.data.variable) != null ? _ref : mappingOptions.data.variables);
        } else {
          return ko.observableArray();
        }
      },
      update: function(mappingOptions) {
        var _ref;
        hack(mappingOptions);
        if (mappingOptions.data != null) {
          return ko.mapping.fromJS((_ref = mappingOptions.data.variable) != null ? _ref : mappingOptions.data.variables);
        } else {
          return mappingOptions.target;
        }
      }
    }
  };

  TasksViewModel = (function() {
    function TasksViewModel() {
      this.encodeVariables = __bind(this.encodeVariables, this);
      this.buildCompleteTaskQueryString = __bind(this.buildCompleteTaskQueryString, this);
      this.completeSelectedTask = __bind(this.completeSelectedTask, this);
      this.takeSelectedTask = __bind(this.takeSelectedTask, this);
      this.completeTask = __bind(this.completeTask, this);
      this.takeTask = __bind(this.takeTask, this);
      this.showTask = __bind(this.showTask, this);
      this.refreshAllTasks = __bind(this.refreshAllTasks, this);
      this.toggleHistory = __bind(this.toggleHistory, this);
      this.updateHistoryTasks = __bind(this.updateHistoryTasks, this);
      this.updateTaskList = __bind(this.updateTaskList, this);
      this.updateAvailableTasks = __bind(this.updateAvailableTasks, this);
      this.updateAssignedTasks = __bind(this.updateAssignedTasks, this);
      this.mapTaskToKoTask = __bind(this.mapTaskToKoTask, this);
      this.createOrUpdateTask = __bind(this.createOrUpdateTask, this);
      this.userCanCompleteOrTakeTask = __bind(this.userCanCompleteOrTakeTask, this);
      this.setComputed = __bind(this.setComputed, this);
      this.activeTasks = ko.observableArray();
      this.showHistory = ko.observable(false);
      this.historyTasks = ko.observableArray();
      this.selectedTask = ko.observable();
      this.username = ko.observable();
      this.setComputed();
      COW.cowRequest("whoami").done((function(_this) {
        return function(data) {
          _this.username(data.id);
          _this.refreshAllTasks();
          COW.amqpSubscribe("#.tasks.#", _this.createOrUpdateTask);
          return COW.amqpConnect();
        };
      })(this));
    }

    TasksViewModel.prototype.setComputed = function() {
      this.assignedTasks = ko.computed((function(_this) {
        return function() {
          return _this.activeTasks().filter(function(t) {
            return t.canCompleteTask() && t.assignee() === _this.username();
          });
        };
      })(this));
      return this.availableTasks = ko.computed((function(_this) {
        return function() {
          return _this.activeTasks().filter(function(t) {
            return t.state() === "Ready";
          });
        };
      })(this));
    };

    TasksViewModel.prototype.userCanCompleteOrTakeTask = function(task) {
      if (task.state() === "Completed") {
        return false;
      }
      if (task.assignee() == null) {
        return true;
      }
      return task.assignee() === this.username();
    };

    TasksViewModel.prototype.createOrUpdateTask = function(newTaskData) {
      var task;
      task = this.activeTasks().first((function(_this) {
        return function(t) {
          return t.id() === newTaskData.id;
        };
      })(this));
      if (task != null) {
        this.mapTaskToKoTask(newTaskData, task);
        this.activeTasks.remove((function(_this) {
          return function(t) {
            return !_this.userCanCompleteOrTakeTask(task);
          };
        })(this));
      } else {
        task = this.mapTaskToKoTask(newTaskData);
        if (this.userCanCompleteOrTakeTask(task)) {
          this.activeTasks.push(task);
        }
      }
      if (task.state() === "Completed") {
        return this.updateHistoryTasks();
      }
    };

    TasksViewModel.prototype.mapTaskToKoTask = function(newTaskData, updateTarget) {
      if (newTaskData.outcome != null) {
        newTaskData.outcomes = newTaskData.outcome;
        delete newTaskData.outcome;
      }
      if (updateTarget != null) {
        return ko.mapping.fromJS(newTaskData, TASK_MAPPING, updateTarget);
      } else {
        return new Task(newTaskData);
      }
    };

    TasksViewModel.prototype.updateAssignedTasks = function() {
      return this.updateTaskList("assignee");
    };

    TasksViewModel.prototype.updateAvailableTasks = function() {
      return this.updateTaskList("candidate");
    };

    TasksViewModel.prototype.updateTaskList = function(queryStringKey) {
      var url;
      url = "tasks?" + queryStringKey + "=" + this.username();
      return COW.cowRequest(url).done((function(_this) {
        return function(data) {
          var t, _i, _len, _ref, _results;
          _ref = data.task;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            t = _ref[_i];
            _results.push(_this.createOrUpdateTask(t));
          }
          return _results;
        };
      })(this));
    };

    TasksViewModel.prototype.updateHistoryTasks = function() {
      var queryString, year;
      if (!this.showHistory()) {
        return;
      }
      year = new Date().getFullYear();
      queryString = "?" + $.param({
        assignee: this.username(),
        start: (year - 1) + "-1-1",
        end: (year + 1) + "-1-1"
      });
      return COW.cowRequest("tasks/history" + queryString).done((function(_this) {
        return function(data) {
          return _this.historyTasks(data.historyTask);
        };
      })(this));
    };

    TasksViewModel.prototype.toggleHistory = function() {
      this.showHistory(!this.showHistory());
      if (this.showHistory()) {
        return this.updateHistoryTasks();
      } else {
        return this.historyTasks.removeAll();
      }
    };

    TasksViewModel.prototype.refreshAllTasks = function() {
      this.updateAssignedTasks();
      this.updateAvailableTasks();
      return this.updateHistoryTasks();
    };

    TasksViewModel.prototype.showTask = function(task) {
      return this.selectedTask(task);
    };

    TasksViewModel.prototype.takeTask = function(task) {
      var url;
      url = "tasks/" + (task.id()) + "/take?assignee=" + (this.username());
      return COW.cowRequest(url, "post").done((function(_this) {
        return function(data) {
          _this.createOrUpdateTask(data);
          return $("#taskInfoModal").modal("hide");
        };
      })(this));
    };

    TasksViewModel.prototype.completeTask = function(task) {
      var outcomeSelected, queryString, url;
      outcomeSelected = (task.selectedOutcome() != null) || task.outcomes().length === 0;
      if (!outcomeSelected) {
        $("#outcomes-form").addClass("has-error");
        $("#outcomes-form .has-error").removeClass("hidden");
        return;
      }
      queryString = this.buildCompleteTaskQueryString(task);
      url = "tasks/" + task.id() + queryString;
      return COW.cowRequest(url, "delete").done((function(_this) {
        return function() {
          _this.activeTasks.remove(task);
          return $("#taskInfoModal").modal("hide");
        };
      })(this));
    };

    TasksViewModel.prototype.takeSelectedTask = function() {
      var url;
      url = "tasks/" + (this.selectedTask().id()) + "/take?assignee=" + (this.username());
      return COW.cowRequest(url, "post").done((function(_this) {
        return function(data) {
          _this.createOrUpdateTask(data);
          return $("#taskInfoModal").modal("hide");
        };
      })(this));
    };

    TasksViewModel.prototype.completeSelectedTask = function() {
      var outcomeSelected, queryString, url;
      outcomeSelected = (this.selectedTask().selectedOutcome() != null) || this.selectedTask().outcomes().length === 0;
      if (!outcomeSelected) {
        $("#outcomes-form").addClass("has-error");
        $("#outcomes-form .has-error").removeClass("hidden");
        return;
      }
      queryString = this.buildCompleteTaskQueryString(this.selectedTask());
      url = "tasks/" + this.selectedTask().id() + queryString;
      return COW.cowRequest(url, "delete").done((function(_this) {
        return function() {
          _this.activeTasks.remove(_this.selectedTask());
          return $("#taskInfoModal").modal("hide");
        };
      })(this));
    };

    TasksViewModel.prototype.buildCompleteTaskQueryString = function(task) {
      var encoded, qsBuilder, v, _i, _len, _ref;
      qsBuilder = [];
      _ref = task.variables();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        v = _ref[_i];
        encoded = $.param({
          "var": "" + (v.name()) + ":" + (v.value())
        });
        qsBuilder.push(encoded);
      }
      if (task.selectedOutcome()) {
        encoded = $.param({
          outcome: task.selectedOutcome()
        });
        qsBuilder.push(encoded);
      }
      if (qsBuilder.length > 0) {
        return "?" + qsBuilder.join("&");
      } else {
        return "";
      }
    };

    TasksViewModel.prototype.encodeVariables = function(variables) {
      var v, varPairs;
      if (variables.length === 0) {
        return null;
      }
      varPairs = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = variables.length; _i < _len; _i++) {
          v = variables[_i];
          _results.push("var=" + (v.name()) + ":" + (v.value()));
        }
        return _results;
      })();
      return varPairs.join("&");
    };

    return TasksViewModel;

  })();

  Task = (function() {
    function Task(newTaskData) {
      this.removeVariable = __bind(this.removeVariable, this);
      this.addVariable = __bind(this.addVariable, this);
      this.setComputed = __bind(this.setComputed, this);
      ko.mapping.fromJS(newTaskData, TASK_MAPPING, this);
      if (this.variables == null) {
        this.variables = ko.observableArray();
      }
      if (this.outcomes == null) {
        this.outcomes = ko.observableArray();
      }
      this.selectedOutcome = ko.observable();
      if (this.outcomes().length === 1) {
        this.selectedOutcome(this.outcomes()[0]);
      }
      this.setComputed();
    }

    Task.prototype.setComputed = function() {
      this.canAssignTask = ko.computed((function(_this) {
        return function() {
          return _this.assignee() == null;
        };
      })(this));
      this.canCompleteTask = ko.computed((function(_this) {
        return function() {
          return _this.state() === "Reserved";
        };
      })(this));
      this.hasVariableConflicts = COW.hasVariableConflicts(this.variables);
      return this.variableHasConflict = COW.variableHasConflict(this.variables);
    };

    Task.prototype.addVariable = function() {
      return this.variables.push({
        name: ko.observable(),
        value: ko.observable()
      });
    };

    Task.prototype.removeVariable = function(variable) {
      return this.variables.remove(variable);
    };

    return Task;

  })();

}).call(this);

//# sourceMappingURL=tasks.map
