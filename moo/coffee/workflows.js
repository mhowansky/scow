// Generated by CoffeeScript 1.7.1
(function() {
  var WorkflowsViewModel,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  WorkflowsViewModel = (function() {
    function WorkflowsViewModel() {
      this.caseInsensitiveSort = __bind(this.caseInsensitiveSort, this);
      this.addVariable = __bind(this.addVariable, this);
      this.removeVariable = __bind(this.removeVariable, this);
      this.loadWorkflows = __bind(this.loadWorkflows, this);
      this.workflowSelected = __bind(this.workflowSelected, this);
      this.loadWorkflowVars = __bind(this.loadWorkflowVars, this);
      this.insertVariables = __bind(this.insertVariables, this);
      this.startWorkflow = __bind(this.startWorkflow, this);
      this.workflows = ko.observableArray();
      this.lastLoadedWorkflow = ko.observable();
      this.selectedWorkflow = ko.observable();
      this.selectedWorkflowVariables = ko.observableArray();
      this.hasVariableConflicts = COW.hasVariableConflicts(this.selectedWorkflowVariables);
      this.variableHasConflict = COW.variableHasConflict(this.selectedWorkflowVariables);
      this.loadWorkflows();
    }

    WorkflowsViewModel.prototype.startWorkflow = function() {
      var requestBody;
      requestBody = {
        processDefinitionKey: this.selectedWorkflow()
      };
      this.insertVariables(requestBody);
      return COW.cowRequest("/processInstances", "post", requestBody).done((function(_this) {
        return function(data) {
          _this.lastLoadedWorkflow(data.key);
          return $("#variables-modal").modal("hide");
        };
      })(this));
    };

    WorkflowsViewModel.prototype.insertVariables = function(data) {
      var v, varList;
      if (this.selectedWorkflowVariables().length < 1) {
        return;
      }
      varList = (function() {
        var _i, _len, _ref, _results;
        _ref = this.selectedWorkflowVariables();
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          v = _ref[_i];
          _results.push({
            name: v.name(),
            value: v.value()
          });
        }
        return _results;
      }).call(this);
      return data.variables = {
        variable: varList
      };
    };

    WorkflowsViewModel.prototype.loadWorkflowVars = function(variables) {
      var v, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = variables.length; _i < _len; _i++) {
        v = variables[_i];
        _results.push(this.selectedWorkflowVariables.push({
          name: ko.observable(v.name),
          value: ko.observable(v.value)
        }));
      }
      return _results;
    };

    WorkflowsViewModel.prototype.workflowSelected = function(workflow) {
      this.selectedWorkflow(workflow);
      $("#variables-modal").modal("show");
      return COW.cowRequest("processes/" + workflow).done((function(_this) {
        return function(data) {
          var vars, _ref;
          _this.selectedWorkflowVariables.removeAll();
          vars = (_ref = data.variables) != null ? _ref.variable : void 0;
          if ((vars != null ? vars.length : void 0) > 0) {
            return _this.loadWorkflowVars(vars);
          }
        };
      })(this));
    };

    WorkflowsViewModel.prototype.loadWorkflows = function() {
      return COW.cowRequest("processDefinitions").done((function(_this) {
        return function(data) {
          var pd, _i, _len, _ref;
          _ref = data.processDefinition;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            pd = _ref[_i];
            _this.workflows.push(pd.key);
          }
          return _this.workflows.sort(_this.caseInsensitiveSort);
        };
      })(this));
    };

    WorkflowsViewModel.prototype.removeVariable = function(variable) {
      return this.selectedWorkflowVariables.remove(variable);
    };

    WorkflowsViewModel.prototype.addVariable = function() {
      return this.selectedWorkflowVariables.push({
        name: ko.observable(),
        value: ko.observable()
      });
    };

    WorkflowsViewModel.prototype.caseInsensitiveSort = function(left, right) {
      var leftLower, rightLower;
      leftLower = left.toLowerCase();
      rightLower = right.toLowerCase();
      if (leftLower < rightLower) {
        return -1;
      } else if (leftLower > rightLower) {
        return 1;
      } else {
        return 0;
      }
    };

    return WorkflowsViewModel;

  })();

  $(function() {
    return ko.applyBindings(new WorkflowsViewModel());
  });

}).call(this);
