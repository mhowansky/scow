// Generated by CoffeeScript 1.7.1
(function() {
  var ActiveWorkflowsViewModel, Workflow,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  $(function() {
    return ko.applyBindings(new ActiveWorkflowsViewModel());
  });

  ActiveWorkflowsViewModel = (function() {
    function ActiveWorkflowsViewModel() {
      this.updateTableHeadings = __bind(this.updateTableHeadings, this);
      this.onAmqpReceive = __bind(this.onAmqpReceive, this);
      this.loadAllWorkflows = __bind(this.loadAllWorkflows, this);
      this.loadWorkflow = __bind(this.loadWorkflow, this);
      this.createOrUpdateWorkflow = __bind(this.createOrUpdateWorkflow, this);
      this.workflows = ko.observableArray();
      this.tableHeadings = ko.observableArray(["Workflow"]);
      this.loadAllWorkflows();
      COW.amqpSubscribe("#.tasks.#", this.onAmqpReceive);
      COW.amqpConnect();
    }

    ActiveWorkflowsViewModel.prototype.createOrUpdateWorkflow = function(newWflowData) {
      var workflow;
      workflow = ko.utils.arrayFirst(this.workflows(), (function(_this) {
        return function(w) {
          return newWflowData.id === w.id;
        };
      })(this));
      if (workflow != null) {
        workflow.updateStatuses(newWflowData.statusSummary);
      } else {
        workflow = new Workflow(newWflowData, this.tableHeadings);
        this.workflows.push(workflow);
      }
      return this.updateTableHeadings(newWflowData.statusSummary);
    };

    ActiveWorkflowsViewModel.prototype.loadWorkflow = function(id) {
      return COW.cowRequest("processInstances/" + id + "/status").done((function(_this) {
        return function(data) {
          return _this.createOrUpdateWorkflow(data);
        };
      })(this));
    };

    ActiveWorkflowsViewModel.prototype.loadAllWorkflows = function() {
      return COW.activeWorkflowIds((function(_this) {
        return function(ids) {
          var id, _i, _len, _results;
          _results = [];
          for (_i = 0, _len = ids.length; _i < _len; _i++) {
            id = ids[_i];
            _results.push(_this.loadWorkflow(id));
          }
          return _results;
        };
      })(this));
    };

    ActiveWorkflowsViewModel.prototype.onAmqpReceive = function(task) {
      return this.loadWorkflow(task.processInstanceId.rightOf("."));
    };

    ActiveWorkflowsViewModel.prototype.updateTableHeadings = function(statuses) {
      var s, _i, _len, _ref, _results;
      _results = [];
      for (_i = 0, _len = statuses.length; _i < _len; _i++) {
        s = statuses[_i];
        if (_ref = s.name, __indexOf.call(this.tableHeadings(), _ref) < 0) {
          _results.push(this.tableHeadings.push(s.name));
        }
      }
      return _results;
    };

    return ActiveWorkflowsViewModel;

  })();

  Workflow = (function() {
    var statusPriority;

    function Workflow(wflowData, tableHeadings) {
      this.tableHeadings = tableHeadings;
      this.getHigherPriorityStatus = __bind(this.getHigherPriorityStatus, this);
      this.updateStatuses = __bind(this.updateStatuses, this);
      this.getStatus = __bind(this.getStatus, this);
      this.setComputed = __bind(this.setComputed, this);
      this.id = wflowData.id;
      this.statuses = ko.observableArray([
        {
          name: "Workflow",
          status: ko.observable(this.id)
        }
      ]);
      this.updateStatuses(wflowData.statusSummary);
      this.setComputed();
    }

    Workflow.prototype.setComputed = function() {
      return this.columnValues = ko.computed((function(_this) {
        return function() {
          var heading, _i, _len, _ref, _ref1, _results;
          _ref = _this.tableHeadings();
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            heading = _ref[_i];
            _results.push((_ref1 = _this.getStatus(heading)) != null ? _ref1.status : void 0);
          }
          return _results;
        };
      })(this));
    };

    Workflow.prototype.getStatus = function(name) {
      return ko.utils.arrayFirst(this.statuses(), (function(_this) {
        return function(s) {
          return name === s.name;
        };
      })(this));
    };

    Workflow.prototype.updateStatuses = function(newStatuses) {
      var existingStatus, name, newStatusesMap, s, status, _i, _len, _results;
      newStatusesMap = {};
      for (_i = 0, _len = newStatuses.length; _i < _len; _i++) {
        s = newStatuses[_i];
        existingStatus = newStatusesMap[s.name];
        newStatusesMap[s.name] = this.getHigherPriorityStatus(s.status, existingStatus);
      }
      _results = [];
      for (name in newStatusesMap) {
        status = newStatusesMap[name];
        existingStatus = this.getStatus(name);
        if (existingStatus != null) {
          _results.push(existingStatus.status(status));
        } else {
          _results.push(this.statuses.push({
            name: name,
            status: ko.observable(status)
          }));
        }
      }
      return _results;
    };

    statusPriority = ["precluded", "completed", "contingent", "planned", "notStarted", "open"];

    Workflow.prototype.getHigherPriorityStatus = function(status1, status2) {
      var index1, index2;
      index1 = statusPriority.indexOf(status1);
      index2 = statusPriority.indexOf(status2);
      if (index1 > index2) {
        return status1;
      } else {
        return status2;
      }
    };

    return Workflow;

  })();

}).call(this);
