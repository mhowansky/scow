package org.wiredwidgets.cow.ac.options;

import org.openide.util.NbPreferences;

/**
 * Provides the contents for a Netbeans
 * <code>OptionsPanelController</code> to hold user preferences applicable to
 * the COW application. The stored parameters can be accessed using a call like:
 * <p/>
 * <code> String var = NbPreferences.forModule(CowSettingsPanel.class).get("</code>variable<code>", "");
 * </code>
 *
 * @author RYANMILLER
 * @see CowSettingsOptionsPanelController
 */
final public class CowSettingsPanel extends javax.swing.JPanel {

    private final CowSettingsOptionsPanelController controller;

    public CowSettingsPanel(CowSettingsOptionsPanelController controller) {
        this.controller = controller;
        initComponents();
    }

    /** This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        ConnectionOptions = new javax.swing.JPanel();
        lblServer = new javax.swing.JLabel();
        txtServer = new javax.swing.JTextField();
        lblUser = new javax.swing.JLabel();
        txtUser = new javax.swing.JTextField();
        lblPassword = new javax.swing.JLabel();
        txtPassword = new javax.swing.JTextField();
        lblNotificationServer = new javax.swing.JLabel();
        txtNotificationServer = new javax.swing.JTextField();
        lblMsg = new javax.swing.JLabel();

        setLayout(new java.awt.BorderLayout());

        ConnectionOptions.setLayout(new java.awt.GridBagLayout());

        org.openide.awt.Mnemonics.setLocalizedText(lblServer, org.openide.util.NbBundle.getMessage(CowSettingsPanel.class, "CowSettingsPanel.lblServer.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(7, 5, 7, 5);
        ConnectionOptions.add(lblServer, gridBagConstraints);

        txtServer.setText(org.openide.util.NbBundle.getMessage(CowSettingsPanel.class, "CowSettingsPanel.txtServer.text")); // NOI18N
        txtServer.setToolTipText(org.openide.util.NbBundle.getMessage(CowSettingsPanel.class, "CowSettingsPanel.txtServer.toolTipText")); // NOI18N
        txtServer.setMinimumSize(new java.awt.Dimension(100, 20));
        txtServer.setPreferredSize(new java.awt.Dimension(300, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 15);
        ConnectionOptions.add(txtServer, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(lblUser, org.openide.util.NbBundle.getMessage(CowSettingsPanel.class, "CowSettingsPanel.lblUser.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(7, 5, 7, 5);
        ConnectionOptions.add(lblUser, gridBagConstraints);

        txtUser.setText(org.openide.util.NbBundle.getMessage(CowSettingsPanel.class, "CowSettingsPanel.txtUser.text")); // NOI18N
        txtUser.setMinimumSize(new java.awt.Dimension(100, 20));
        txtUser.setPreferredSize(new java.awt.Dimension(300, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 15);
        ConnectionOptions.add(txtUser, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(lblPassword, org.openide.util.NbBundle.getMessage(CowSettingsPanel.class, "CowSettingsPanel.lblPassword.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(7, 5, 7, 5);
        ConnectionOptions.add(lblPassword, gridBagConstraints);

        txtPassword.setText(org.openide.util.NbBundle.getMessage(CowSettingsPanel.class, "CowSettingsPanel.txtPassword.text")); // NOI18N
        txtPassword.setMinimumSize(new java.awt.Dimension(100, 20));
        txtPassword.setPreferredSize(new java.awt.Dimension(300, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 15);
        ConnectionOptions.add(txtPassword, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(lblNotificationServer, org.openide.util.NbBundle.getMessage(CowSettingsPanel.class, "CowSettingsPanel.lblNotificationServer.text")); // NOI18N
        ConnectionOptions.add(lblNotificationServer, new java.awt.GridBagConstraints());

        txtNotificationServer.setText(org.openide.util.NbBundle.getMessage(CowSettingsPanel.class, "CowSettingsPanel.txtNotificationServer.text")); // NOI18N
        txtNotificationServer.setToolTipText(org.openide.util.NbBundle.getMessage(CowSettingsPanel.class, "CowSettingsPanel.txtNotificationServer.toolTipText")); // NOI18N
        txtNotificationServer.setMinimumSize(new java.awt.Dimension(100, 20));
        txtNotificationServer.setPreferredSize(new java.awt.Dimension(300, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 15);
        ConnectionOptions.add(txtNotificationServer, gridBagConstraints);

        add(ConnectionOptions, java.awt.BorderLayout.NORTH);

        lblMsg.setFont(lblMsg.getFont().deriveFont(lblMsg.getFont().getSize()-1f));
        lblMsg.setForeground(new java.awt.Color(51, 51, 255));
        org.openide.awt.Mnemonics.setLocalizedText(lblMsg, org.openide.util.NbBundle.getMessage(CowSettingsPanel.class, "CowSettingsPanel.lblMsg.text")); // NOI18N
        lblMsg.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        add(lblMsg, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * read settings and initialize GUI
     */
    void load() {
        // read settings and initialize GUI
        // Example:        
        // someCheckBox.setSelected(Preferences.userNodeForPackage(CowSettingsPanel.class).getBoolean("someFlag", false));
        // or for org.openide.util with API spec. version >= 7.4:
        // someCheckBox.setSelected(NbPreferences.forModule(CowSettingsPanel.class).getBoolean("someFlag", false));
        // or:
        // someTextField.setText(SomeSystemOption.getDefault().getSomeStringProperty());

        // If desired, this would be the place to load in default values for the application
        // from a config file or something
        String server = NbPreferences.forModule(CowSettingsPanel.class).get("cowserver", "");
        txtServer.setText(server);

        String user = NbPreferences.forModule(CowSettingsPanel.class).get("cowuser", "");
        txtUser.setText(user);

        String pw = NbPreferences.forModule(CowSettingsPanel.class).get("cowuserpassword", "");
        txtPassword.setText(pw);

        String notification = NbPreferences.forModule(CowSettingsPanel.class).get("cownotification", "");
        txtNotificationServer.setText(notification);
    }

    /**
     * store modified settings
     */
    void store() {
        // store modified settings
        // Example:
        // Preferences.userNodeForPackage(CowSettingsPanel.class).putBoolean("someFlag", someCheckBox.isSelected());
        // or for org.openide.util with API spec. version >= 7.4:
        // NbPreferences.forModule(CowSettingsPanel.class).putBoolean("someFlag", someCheckBox.isSelected());
        // or:
        // SomeSystemOption.getDefault().setSomeStringProperty(someTextField.getText());

        NbPreferences.forModule(CowSettingsPanel.class).put("cowserver", txtServer.getText());

        NbPreferences.forModule(CowSettingsPanel.class).put("cowuser", txtUser.getText());

        NbPreferences.forModule(CowSettingsPanel.class).put("cowuserpassword", txtPassword.getText());

        NbPreferences.forModule(CowSettingsPanel.class).put("cownotification", txtNotificationServer.getText());
    }

    boolean valid() {
        // TODO check whether form of preferences is consistent and complete
        return true;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel ConnectionOptions;
    private javax.swing.JLabel lblMsg;
    private javax.swing.JLabel lblNotificationServer;
    private javax.swing.JLabel lblPassword;
    private javax.swing.JLabel lblServer;
    private javax.swing.JLabel lblUser;
    private javax.swing.JTextField txtNotificationServer;
    private javax.swing.JTextField txtPassword;
    private javax.swing.JTextField txtServer;
    private javax.swing.JTextField txtUser;
    // End of variables declaration//GEN-END:variables
}
