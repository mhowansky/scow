package org.wiredwidgets.cow.ac.workflowsummary.ui;

import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.logging.Logger;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.util.ImageUtilities;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;
import org.wiredwidgets.cow.ac.util.server.BpmClientController;
import org.wiredwidgets.cow.ac.workflowsummary.controller.ChicletTableModelController;
import org.wiredwidgets.cow.ac.workflowsummary.controller.ProcessSelectionManager;
import org.wiredwidgets.cow.ac.workflowsummary.controller.ProcessSelectionManager.ProcessWithId;
import org.wiredwidgets.cow.ac.workflowsummary.model.ChicletTableModel;
import org.wiredwidgets.cow.ac.workflowsummary.table.ChicletTable;
import org.wiredwidgets.cow.ac.workflowsummary.table.RowHeaderTable;
import org.wiredwidgets.cow.ac.workflowviewer.WorkflowDetailsTopComponent;

/**
 * This TopComponent displays a summary of all <b>active</b> workflows on a COW
 * server. It contains logic to bring up details of a particular workflow
 * displayed via {@link WorkflowDetailsTopComponent}. Buttons exist to refresh
 * data from the server, clear completed workflows from the display, and display
 * a dialog with a legend of what the coloring means. It's data is automatically
 * refreshed via functionality handled by the {@link ChicletTableModelController}.
 */
@ConvertAsProperties(dtd = "-//org.wiredwidgets.cow.ac.workflowsummary.ui//Chiclet//EN",
autostore = false)
public final class ChicletTopComponent extends TopComponent {

    private static ChicletTopComponent instance;
    private ChicletTable chicletTable;
    private ChicletTableModelController chicletManager;
    private ProcessSelectionManager selectionManager;
    private JTable rowTable;
    /** path to the icon used by the component and its open action */
    static final String ICON_PATH = "org/wiredwidgets/cow/ac/client/images/cowicon16x16.png";
    private static final String PREFERRED_ID = "ChicletTopComponent";

    public ChicletTopComponent() {
        chicletTable = new ChicletTable(); // referenced by components managed by the Netbeans GUI creator, so must be initialized first
        initComponents();
        setName(NbBundle.getMessage(ChicletTopComponent.class, "CTL_ChicletTopComponent"));
        setToolTipText(NbBundle.getMessage(ChicletTopComponent.class, "HINT_ChicletTopComponent"));
        setIcon(ImageUtilities.loadImage(ICON_PATH, true));

        // wire up the chiclet table to get data and handle user interactions
        chicletManager = new ChicletTableModelController(chicletTable.getChicletTableModel());
        BpmClientController.getInstance().addSeverConnectionEventListener(chicletManager);
        selectionManager = new ProcessSelectionManager(chicletTable.getChicletTableModel());
        chicletTable.getSelectionModel().addListSelectionListener(selectionManager);
    }

    /** This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = chicletTable;
        refreshButton = new javax.swing.JButton();
        clearCompletedWorkflowsButton = new javax.swing.JButton();
        viewWorkflowButton = new javax.swing.JButton();
        colorLegendButton = new javax.swing.JButton();

        jTable1.setModel(new ChicletTableModel());
        rowTable = new RowHeaderTable(chicletTable);
        jScrollPane1.setRowHeaderView(rowTable);
        jScrollPane1.setCorner(JScrollPane.UPPER_LEFT_CORNER,
            rowTable.getTableHeader());
        jTable1.setRowSelectionAllowed(false);
        rowTable.addMouseListener(new myMouseListener());
        jTable1.setShowHorizontalLines(false);
        jTable1.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTable1);

        org.openide.awt.Mnemonics.setLocalizedText(refreshButton, org.openide.util.NbBundle.getMessage(ChicletTopComponent.class, "ChicletTopComponent.refreshButton.text")); // NOI18N
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(clearCompletedWorkflowsButton, org.openide.util.NbBundle.getMessage(ChicletTopComponent.class, "ChicletTopComponent.clearCompletedWorkflowsButton.text")); // NOI18N
        clearCompletedWorkflowsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearCompletedWorkflowsButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(viewWorkflowButton, org.openide.util.NbBundle.getMessage(ChicletTopComponent.class, "ChicletTopComponent.viewWorkflowButton.text")); // NOI18N
        viewWorkflowButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewWorkflowButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(colorLegendButton, org.openide.util.NbBundle.getMessage(ChicletTopComponent.class, "ChicletTopComponent.colorLegendButton.text")); // NOI18N
        colorLegendButton.setMaximumSize(new java.awt.Dimension(103, 23));
        colorLegendButton.setMinimumSize(new java.awt.Dimension(103, 23));
        colorLegendButton.setPreferredSize(new java.awt.Dimension(103, 23));
        colorLegendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorLegendButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 482, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(refreshButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(clearCompletedWorkflowsButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(viewWorkflowButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(colorLegendButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(66, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(clearCompletedWorkflowsButton)
                    .addComponent(refreshButton)
                    .addComponent(viewWorkflowButton)
                    .addComponent(colorLegendButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 246, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        chicletManager.pollServer();
    }//GEN-LAST:event_refreshButtonActionPerformed

    private void clearCompletedWorkflowsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearCompletedWorkflowsButtonActionPerformed
        chicletManager.clearCompleted();
    }//GEN-LAST:event_clearCompletedWorkflowsButtonActionPerformed

    private void viewWorkflowButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewWorkflowButtonActionPerformed
        ProcessWithId selectedProcess = ChicletTopComponent.this.selectionManager.getSelectedProcess();
        if (selectedProcess != null) {
            WorkflowDetailsTopComponent win = new WorkflowDetailsTopComponent();
            win.open();
            win.setData(selectedProcess.getProcessFullId(), selectedProcess.getProcess());
            win.requestAttention(true);
        }
    }//GEN-LAST:event_viewWorkflowButtonActionPerformed

    private void colorLegendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorLegendButtonActionPerformed
        ColorLegendDialog dialog = new ColorLegendDialog(null, true);
        dialog.setTitle("Color Legend");
        dialog.setVisible(true);
    }//GEN-LAST:event_colorLegendButtonActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton clearCompletedWorkflowsButton;
    private javax.swing.JButton colorLegendButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton refreshButton;
    private javax.swing.JButton viewWorkflowButton;
    // End of variables declaration//GEN-END:variables

    /**
     * Gets default instance. Do not use directly: reserved for *.settings files
     * only, i.e. deserialization routines; otherwise you could get a
     * non-deserialized instance. To obtain the singleton instance, use {@link #findInstance}.
     */
    public static synchronized ChicletTopComponent getDefault() {
        if (instance == null) {
            instance = new ChicletTopComponent();
        }
        return instance;
    }

    /**
     * Obtain the ChicletTopComponent instance. Never call {@link #getDefault}
     * directly!
     */
    public static synchronized ChicletTopComponent findInstance() {
        TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
        if (win == null) {
            Logger.getLogger(ChicletTopComponent.class.getName()).warning(
                    "Cannot find " + PREFERRED_ID + " component. It will not be located properly in the window system.");
            return getDefault();
        }
        if (win instanceof ChicletTopComponent) {
            return (ChicletTopComponent) win;
        }
        Logger.getLogger(ChicletTopComponent.class.getName()).warning(
                "There seem to be multiple components with the '" + PREFERRED_ID
                + "' ID. That is a potential source of errors and unexpected behavior.");
        return getDefault();
    }

    @Override
    public int getPersistenceType() {
        return TopComponent.PERSISTENCE_ALWAYS;
    }

    @Override
    public void componentOpened() {
        if (BpmClientController.getInstance().isInitialized()) {
            // make a best effort to start things populated
            chicletManager.pollServer();
        }
    }

    @Override
    public void componentClosed() {
        // add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // store your settings...
    }

    Object readProperties(java.util.Properties p) {
        if (instance == null) {
            instance = this;
        }
        instance.readPropertiesImpl(p);
        return instance;
    }

    private void readPropertiesImpl(java.util.Properties p) {
        String version = p.getProperty("version");
        // read your settings according to their version...
    }

    @Override
    protected String preferredID() {
        return PREFERRED_ID;
    }

    private class myMouseListener implements MouseListener {

        @Override
        public void mouseClicked(MouseEvent e) {
            if (e.getClickCount() == 2) {
                ProcessWithId selectedProcess = ChicletTopComponent.this.selectionManager.getSelectedProcess();
                if (selectedProcess != null) {
                    WorkflowDetailsTopComponent win = new WorkflowDetailsTopComponent();
                    win.open();
                    win.setData(selectedProcess.getProcessFullId(), selectedProcess.getProcess());
                    win.requestAttention(true);
                }
            }
        }

        @Override
        public void mousePressed(MouseEvent e) {
            // nothing
        }

        @Override
        public void mouseReleased(MouseEvent e) {
            // nothing
        }

        @Override
        public void mouseEntered(MouseEvent e) {
            // nothing 
        }

        @Override
        public void mouseExited(MouseEvent e) {
            // nothing
        }
    }
}
